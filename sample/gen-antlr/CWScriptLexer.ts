// Generated from /Users/william/IdeaProjects/ldtk/sample/gen-antlr/CWScriptLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CWScriptLexer extends Lexer {
	public static readonly CONTRACT = 1;
	public static readonly LBRACE = 2;
	public static readonly RBRACE = 3;
	public static readonly LPAREN = 4;
	public static readonly RPAREN = 5;
	public static readonly EXTENDS = 6;
	public static readonly IMPLEMENTS = 7;
	public static readonly IMPORT = 8;
	public static readonly FROM = 9;
	public static readonly MUL = 10;
	public static readonly AS = 11;
	public static readonly COMMA = 12;
	public static readonly QUOTE = 13;
	public static readonly StringLiteral = 14;
	public static readonly Ident = 15;
	public static readonly WS = 16;
	public static readonly COMMENT_END = 17;
	public static readonly OTHER = 18;
	public static readonly comment = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "comment",
	];

	public static readonly ruleNames: string[] = [
		"CONTRACT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "EXTENDS", "IMPLEMENTS", 
		"IMPORT", "FROM", "MUL", "AS", "COMMA", "QUOTE", "StringLiteral", "Ident", 
		"WS", "COMMENT_END", "OTHER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'contract'", "'{'", "'}'", "'('", "')'", "'extends'", "'implements'", 
		"'import'", "'from'", "'*'", "'as'", "','", "'\"'", undefined, undefined, 
		undefined, "'*/'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CONTRACT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "EXTENDS", 
		"IMPLEMENTS", "IMPORT", "FROM", "MUL", "AS", "COMMA", "QUOTE", "StringLiteral", 
		"Ident", "WS", "COMMENT_END", "OTHER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CWScriptLexer._LITERAL_NAMES, CWScriptLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CWScriptLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CWScriptLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CWScriptLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return CWScriptLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CWScriptLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CWScriptLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CWScriptLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x84\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05" +
		"\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x07\x0Fd\n\x0F\f\x0F\x0E\x0Fg\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x07\x10m\n\x10\f\x10\x0E\x10p\v\x10\x03\x11\x06\x11s\n\x11\r\x11\x0E" +
		"\x11t\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x06\x13\x7F\n\x13\r\x13\x0E\x13\x80\x03\x13\x03\x13\x04en\x02\x02\x14" +
		"\x04\x02\x03\x06\x02\x04\b\x02\x05\n\x02\x06\f\x02\x07\x0E\x02\b\x10\x02" +
		"\t\x12\x02\n\x14\x02\v\x16\x02\f\x18\x02\r\x1A\x02\x0E\x1C\x02\x0F\x1E" +
		"\x02\x10 \x02\x11\"\x02\x12$\x02\x13&\x02\x14\x04\x02\x03\x06\x03\x02" +
		"$$\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\x86\x02" +
		"\x04\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x02\b\x03\x02\x02\x02\x02" +
		"\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10" +
		"\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16" +
		"\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C" +
		"\x03\x02\x02\x02\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03" +
		"\x02\x02\x02\x03$\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x04(\x03\x02\x02" +
		"\x02\x061\x03\x02\x02\x02\b3\x03\x02\x02\x02\n5\x03\x02\x02\x02\f7\x03" +
		"\x02\x02\x02\x0E9\x03\x02\x02\x02\x10A\x03\x02\x02\x02\x12L\x03\x02\x02" +
		"\x02\x14S\x03\x02\x02\x02\x16X\x03\x02\x02\x02\x18Z\x03\x02\x02\x02\x1A" +
		"]\x03\x02\x02\x02\x1C_\x03\x02\x02\x02\x1Ea\x03\x02\x02\x02 j\x03\x02" +
		"\x02\x02\"r\x03\x02\x02\x02$x\x03\x02\x02\x02&~\x03\x02\x02\x02()\x07" +
		"e\x02\x02)*\x07q\x02\x02*+\x07p\x02\x02+,\x07v\x02\x02,-\x07t\x02\x02" +
		"-.\x07c\x02\x02./\x07e\x02\x02/0\x07v\x02\x020\x05\x03\x02\x02\x0212\x07" +
		"}\x02\x022\x07\x03\x02\x02\x0234\x07\x7F\x02\x024\t\x03\x02\x02\x0256" +
		"\x07*\x02\x026\v\x03\x02\x02\x0278\x07+\x02\x028\r\x03\x02\x02\x029:\x07" +
		"g\x02\x02:;\x07z\x02\x02;<\x07v\x02\x02<=\x07g\x02\x02=>\x07p\x02\x02" +
		">?\x07f\x02\x02?@\x07u\x02\x02@\x0F\x03\x02\x02\x02AB\x07k\x02\x02BC\x07" +
		"o\x02\x02CD\x07r\x02\x02DE\x07n\x02\x02EF\x07g\x02\x02FG\x07o\x02\x02" +
		"GH\x07g\x02\x02HI\x07p\x02\x02IJ\x07v\x02\x02JK\x07u\x02\x02K\x11\x03" +
		"\x02\x02\x02LM\x07k\x02\x02MN\x07o\x02\x02NO\x07r\x02\x02OP\x07q\x02\x02" +
		"PQ\x07t\x02\x02QR\x07v\x02\x02R\x13\x03\x02\x02\x02ST\x07h\x02\x02TU\x07" +
		"t\x02\x02UV\x07q\x02\x02VW\x07o\x02\x02W\x15\x03\x02\x02\x02XY\x07,\x02" +
		"\x02Y\x17\x03\x02\x02\x02Z[\x07c\x02\x02[\\\x07u\x02\x02\\\x19\x03\x02" +
		"\x02\x02]^\x07.\x02\x02^\x1B\x03\x02\x02\x02_`\x07$\x02\x02`\x1D\x03\x02" +
		"\x02\x02ae\x07$\x02\x02bd\n\x02\x02\x02cb\x03\x02\x02\x02dg\x03\x02\x02" +
		"\x02ef\x03\x02\x02\x02ec\x03\x02\x02\x02fh\x03\x02\x02\x02ge\x03\x02\x02" +
		"\x02hi\x07$\x02\x02i\x1F\x03\x02\x02\x02jn\t\x03\x02\x02km\t\x04\x02\x02" +
		"lk\x03\x02\x02\x02mp\x03\x02\x02\x02no\x03\x02\x02\x02nl\x03\x02\x02\x02" +
		"o!\x03\x02\x02\x02pn\x03\x02\x02\x02qs\t\x05\x02\x02rq\x03\x02\x02\x02" +
		"st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02uv\x03\x02\x02\x02" +
		"vw\b\x11\x02\x02w#\x03\x02\x02\x02xy\x07,\x02\x02yz\x071\x02\x02z{\x03" +
		"\x02\x02\x02{|\b\x12\x03\x02|%\x03\x02\x02\x02}\x7F\x070\x02\x02~}\x03" +
		"\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03" +
		"\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\x83\b\x13\x04\x02\x83\'\x03\x02" +
		"\x02\x02\b\x02\x03ent\x80\x05\x02\x03\x02\x06\x02\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CWScriptLexer.__ATN) {
			CWScriptLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CWScriptLexer._serializedATN));
		}

		return CWScriptLexer.__ATN;
	}

}

